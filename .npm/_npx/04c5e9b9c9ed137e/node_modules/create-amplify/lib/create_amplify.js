#!/usr/bin/env node
/*
  We should be very careful about how much logic we add to this package.
  If this grows beyond just copying template files, we probably should put that logic into @aws-amplify/cli and delegate to it here
  This is because packages that run as part of `npm create *` are cached in the global npx cache which is cumbersome to update / clean.
  If customers have a cached version of the create-amplify package, they might execute that cached version even after we publish features and fixes to the package on npm.
 */
import { LogLevel, PackageManagerControllerFactory, format, printer, } from '@aws-amplify/cli-core';
import { ProjectRootValidator } from './project_root_validator.js';
import { AmplifyProjectCreator } from './amplify_project_creator.js';
import { getProjectRoot } from './get_project_root.js';
import { GitIgnoreInitializer } from './gitignore_initializer.js';
import { InitialProjectFileGenerator } from './initial_project_file_generator.js';
const projectRoot = await getProjectRoot();
const packageManagerControllerFactory = new PackageManagerControllerFactory(projectRoot);
const packageManagerController = packageManagerControllerFactory.getPackageManagerController();
const amplifyProjectCreator = new AmplifyProjectCreator(projectRoot, packageManagerController, new ProjectRootValidator(projectRoot), new GitIgnoreInitializer(projectRoot), new InitialProjectFileGenerator(projectRoot, packageManagerController));
try {
    await amplifyProjectCreator.create();
}
catch (err) {
    printer.log(format.error(err), LogLevel.ERROR);
    process.exitCode = 1;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlX2FtcGxpZnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY3JlYXRlX2FtcGxpZnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBOzs7OztHQUtHO0FBRUgsT0FBTyxFQUNMLFFBQVEsRUFDUiwrQkFBK0IsRUFDL0IsTUFBTSxFQUNOLE9BQU8sR0FDUixNQUFNLHVCQUF1QixDQUFDO0FBQy9CLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ25FLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUVsRixNQUFNLFdBQVcsR0FBRyxNQUFNLGNBQWMsRUFBRSxDQUFDO0FBRTNDLE1BQU0sK0JBQStCLEdBQUcsSUFBSSwrQkFBK0IsQ0FDekUsV0FBVyxDQUNaLENBQUM7QUFFRixNQUFNLHdCQUF3QixHQUM1QiwrQkFBK0IsQ0FBQywyQkFBMkIsRUFBRSxDQUFDO0FBRWhFLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxxQkFBcUIsQ0FDckQsV0FBVyxFQUNYLHdCQUF3QixFQUN4QixJQUFJLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxFQUNyQyxJQUFJLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxFQUNyQyxJQUFJLDJCQUEyQixDQUFDLFdBQVcsRUFBRSx3QkFBd0IsQ0FBQyxDQUN2RSxDQUFDO0FBRUYsSUFBSTtJQUNGLE1BQU0scUJBQXFCLENBQUMsTUFBTSxFQUFFLENBQUM7Q0FDdEM7QUFBQyxPQUFPLEdBQUcsRUFBRTtJQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0MsT0FBTyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7Q0FDdEIiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5cbi8qXG4gIFdlIHNob3VsZCBiZSB2ZXJ5IGNhcmVmdWwgYWJvdXQgaG93IG11Y2ggbG9naWMgd2UgYWRkIHRvIHRoaXMgcGFja2FnZS5cbiAgSWYgdGhpcyBncm93cyBiZXlvbmQganVzdCBjb3B5aW5nIHRlbXBsYXRlIGZpbGVzLCB3ZSBwcm9iYWJseSBzaG91bGQgcHV0IHRoYXQgbG9naWMgaW50byBAYXdzLWFtcGxpZnkvY2xpIGFuZCBkZWxlZ2F0ZSB0byBpdCBoZXJlXG4gIFRoaXMgaXMgYmVjYXVzZSBwYWNrYWdlcyB0aGF0IHJ1biBhcyBwYXJ0IG9mIGBucG0gY3JlYXRlICpgIGFyZSBjYWNoZWQgaW4gdGhlIGdsb2JhbCBucHggY2FjaGUgd2hpY2ggaXMgY3VtYmVyc29tZSB0byB1cGRhdGUgLyBjbGVhbi5cbiAgSWYgY3VzdG9tZXJzIGhhdmUgYSBjYWNoZWQgdmVyc2lvbiBvZiB0aGUgY3JlYXRlLWFtcGxpZnkgcGFja2FnZSwgdGhleSBtaWdodCBleGVjdXRlIHRoYXQgY2FjaGVkIHZlcnNpb24gZXZlbiBhZnRlciB3ZSBwdWJsaXNoIGZlYXR1cmVzIGFuZCBmaXhlcyB0byB0aGUgcGFja2FnZSBvbiBucG0uXG4gKi9cblxuaW1wb3J0IHtcbiAgTG9nTGV2ZWwsXG4gIFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnksXG4gIGZvcm1hdCxcbiAgcHJpbnRlcixcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcbmltcG9ydCB7IFByb2plY3RSb290VmFsaWRhdG9yIH0gZnJvbSAnLi9wcm9qZWN0X3Jvb3RfdmFsaWRhdG9yLmpzJztcbmltcG9ydCB7IEFtcGxpZnlQcm9qZWN0Q3JlYXRvciB9IGZyb20gJy4vYW1wbGlmeV9wcm9qZWN0X2NyZWF0b3IuanMnO1xuaW1wb3J0IHsgZ2V0UHJvamVjdFJvb3QgfSBmcm9tICcuL2dldF9wcm9qZWN0X3Jvb3QuanMnO1xuaW1wb3J0IHsgR2l0SWdub3JlSW5pdGlhbGl6ZXIgfSBmcm9tICcuL2dpdGlnbm9yZV9pbml0aWFsaXplci5qcyc7XG5pbXBvcnQgeyBJbml0aWFsUHJvamVjdEZpbGVHZW5lcmF0b3IgfSBmcm9tICcuL2luaXRpYWxfcHJvamVjdF9maWxlX2dlbmVyYXRvci5qcyc7XG5cbmNvbnN0IHByb2plY3RSb290ID0gYXdhaXQgZ2V0UHJvamVjdFJvb3QoKTtcblxuY29uc3QgcGFja2FnZU1hbmFnZXJDb250cm9sbGVyRmFjdG9yeSA9IG5ldyBQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJGYWN0b3J5KFxuICBwcm9qZWN0Um9vdFxuKTtcblxuY29uc3QgcGFja2FnZU1hbmFnZXJDb250cm9sbGVyID1cbiAgcGFja2FnZU1hbmFnZXJDb250cm9sbGVyRmFjdG9yeS5nZXRQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIoKTtcblxuY29uc3QgYW1wbGlmeVByb2plY3RDcmVhdG9yID0gbmV3IEFtcGxpZnlQcm9qZWN0Q3JlYXRvcihcbiAgcHJvamVjdFJvb3QsXG4gIHBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlcixcbiAgbmV3IFByb2plY3RSb290VmFsaWRhdG9yKHByb2plY3RSb290KSxcbiAgbmV3IEdpdElnbm9yZUluaXRpYWxpemVyKHByb2plY3RSb290KSxcbiAgbmV3IEluaXRpYWxQcm9qZWN0RmlsZUdlbmVyYXRvcihwcm9qZWN0Um9vdCwgcGFja2FnZU1hbmFnZXJDb250cm9sbGVyKVxuKTtcblxudHJ5IHtcbiAgYXdhaXQgYW1wbGlmeVByb2plY3RDcmVhdG9yLmNyZWF0ZSgpO1xufSBjYXRjaCAoZXJyKSB7XG4gIHByaW50ZXIubG9nKGZvcm1hdC5lcnJvcihlcnIpLCBMb2dMZXZlbC5FUlJPUik7XG4gIHByb2Nlc3MuZXhpdENvZGUgPSAxO1xufVxuIl19