import _path from 'path';
import _fsp from 'fs/promises';
/**
 * InitialProjectFileGenerator is responsible for copying getting started template to a new project directory
 */
export class InitialProjectFileGenerator {
    projectRoot;
    packageManagerController;
    fsp;
    path;
    /**
     * Responsible for copying getting started template to a new project directory
     * fs is injected for testing
     */
    constructor(projectRoot, packageManagerController, fsp = _fsp, path = _path) {
        this.projectRoot = projectRoot;
        this.packageManagerController = packageManagerController;
        this.fsp = fsp;
        this.path = path;
    }
    /**
     * Copies the template directory to an amplify folder within the projectRoot
     */
    generateInitialProjectFiles = async () => {
        const targetDir = this.path.resolve(this.projectRoot, 'amplify');
        await this.fsp.mkdir(targetDir, { recursive: true });
        await this.fsp.cp(new URL('../templates/basic-auth-data/amplify', import.meta.url), targetDir, { recursive: true });
        const packageJsonContent = { type: 'module' };
        await this.fsp.writeFile(this.path.resolve(targetDir, 'package.json'), JSON.stringify(packageJsonContent, null, 2));
        await this.packageManagerController.initializeTsConfig(targetDir);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbF9wcm9qZWN0X2ZpbGVfZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2luaXRpYWxfcHJvamVjdF9maWxlX2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssTUFBTSxNQUFNLENBQUM7QUFDekIsT0FBTyxJQUFJLE1BQU0sYUFBYSxDQUFDO0FBRy9COztHQUVHO0FBQ0gsTUFBTSxPQUFPLDJCQUEyQjtJQU1uQjtJQUNBO0lBQ0E7SUFDQTtJQVJuQjs7O09BR0c7SUFDSCxZQUNtQixXQUFtQixFQUNuQix3QkFBa0QsRUFDbEQsTUFBTSxJQUFJLEVBQ1YsT0FBTyxLQUFLO1FBSFosZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFDbkIsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUNsRCxRQUFHLEdBQUgsR0FBRyxDQUFPO1FBQ1YsU0FBSSxHQUFKLElBQUksQ0FBUTtJQUM1QixDQUFDO0lBRUo7O09BRUc7SUFDSCwyQkFBMkIsR0FBRyxLQUFLLElBQW1CLEVBQUU7UUFDdEQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNqRSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQ2YsSUFBSSxHQUFHLENBQUMsc0NBQXNDLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFDaEUsU0FBUyxFQUNULEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUNwQixDQUFDO1FBRUYsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQztRQUM5QyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLEVBQzVDLElBQUksQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUM1QyxDQUFDO1FBRUYsTUFBTSxJQUFJLENBQUMsd0JBQXdCLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEUsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX3BhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgX2ZzcCBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgeyB0eXBlIFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuXG4vKipcbiAqIEluaXRpYWxQcm9qZWN0RmlsZUdlbmVyYXRvciBpcyByZXNwb25zaWJsZSBmb3IgY29weWluZyBnZXR0aW5nIHN0YXJ0ZWQgdGVtcGxhdGUgdG8gYSBuZXcgcHJvamVjdCBkaXJlY3RvcnlcbiAqL1xuZXhwb3J0IGNsYXNzIEluaXRpYWxQcm9qZWN0RmlsZUdlbmVyYXRvciB7XG4gIC8qKlxuICAgKiBSZXNwb25zaWJsZSBmb3IgY29weWluZyBnZXR0aW5nIHN0YXJ0ZWQgdGVtcGxhdGUgdG8gYSBuZXcgcHJvamVjdCBkaXJlY3RvcnlcbiAgICogZnMgaXMgaW5qZWN0ZWQgZm9yIHRlc3RpbmdcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvamVjdFJvb3Q6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlcjogUGFja2FnZU1hbmFnZXJDb250cm9sbGVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZnNwID0gX2ZzcCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBhdGggPSBfcGF0aFxuICApIHt9XG5cbiAgLyoqXG4gICAqIENvcGllcyB0aGUgdGVtcGxhdGUgZGlyZWN0b3J5IHRvIGFuIGFtcGxpZnkgZm9sZGVyIHdpdGhpbiB0aGUgcHJvamVjdFJvb3RcbiAgICovXG4gIGdlbmVyYXRlSW5pdGlhbFByb2plY3RGaWxlcyA9IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCB0YXJnZXREaXIgPSB0aGlzLnBhdGgucmVzb2x2ZSh0aGlzLnByb2plY3RSb290LCAnYW1wbGlmeScpO1xuICAgIGF3YWl0IHRoaXMuZnNwLm1rZGlyKHRhcmdldERpciwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgYXdhaXQgdGhpcy5mc3AuY3AoXG4gICAgICBuZXcgVVJMKCcuLi90ZW1wbGF0ZXMvYmFzaWMtYXV0aC1kYXRhL2FtcGxpZnknLCBpbXBvcnQubWV0YS51cmwpLFxuICAgICAgdGFyZ2V0RGlyLFxuICAgICAgeyByZWN1cnNpdmU6IHRydWUgfVxuICAgICk7XG5cbiAgICBjb25zdCBwYWNrYWdlSnNvbkNvbnRlbnQgPSB7IHR5cGU6ICdtb2R1bGUnIH07XG4gICAgYXdhaXQgdGhpcy5mc3Aud3JpdGVGaWxlKFxuICAgICAgdGhpcy5wYXRoLnJlc29sdmUodGFyZ2V0RGlyLCAncGFja2FnZS5qc29uJyksXG4gICAgICBKU09OLnN0cmluZ2lmeShwYWNrYWdlSnNvbkNvbnRlbnQsIG51bGwsIDIpXG4gICAgKTtcblxuICAgIGF3YWl0IHRoaXMucGFja2FnZU1hbmFnZXJDb250cm9sbGVyLmluaXRpYWxpemVUc0NvbmZpZyh0YXJnZXREaXIpO1xuICB9O1xufVxuIl19