import fsp from 'fs/promises';
import path from 'path';
import yargs from 'yargs';
import { AmplifyUserError } from '@aws-amplify/platform-core';
import { AmplifyPrompter, LogLevel, printer } from '@aws-amplify/cli-core';
/**
 * Returns the project root directory.
 */
export const getProjectRoot = async () => {
    const argv = await yargs(process.argv.slice(2)).options({
        yes: {
            type: 'boolean',
            default: false,
        },
    }).argv;
    const useDefault = process.env.npm_config_yes === 'true' || argv.yes === true;
    const defaultProjectRoot = '.';
    let projectRoot = useDefault
        ? defaultProjectRoot
        : await AmplifyPrompter.input({
            message: 'Where should we create your project?',
            defaultValue: defaultProjectRoot,
        });
    projectRoot = path.isAbsolute(projectRoot)
        ? projectRoot
        : path.resolve(process.cwd(), projectRoot);
    const isExistProjectRoot = await fsp
        .stat(projectRoot)
        .then(() => true)
        .catch(() => false); // There's no `fsp.exists` method, so we use `stat` instead. See https://github.com/nodejs/node/issues/39960#issuecomment-909444667
    if (!isExistProjectRoot) {
        printer.log(`The provided directory (${projectRoot}) does not exist.`, LogLevel.DEBUG);
        printer.log(`Creating directory ${projectRoot}`, LogLevel.DEBUG);
        try {
            await fsp.mkdir(projectRoot, { recursive: true });
        }
        catch (err) {
            throw new AmplifyUserError('ProjectDirectoryCreateError', {
                message: `Failed to create project directory`,
                resolution: `Ensure that ${projectRoot} is the correct path and you have write permissions to this location.`,
            });
        }
    }
    return projectRoot;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0X3Byb2plY3Rfcm9vdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9nZXRfcHJvamVjdF9yb290LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sR0FBRyxNQUFNLGFBQWEsQ0FBQztBQUM5QixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzlELE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTNFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLEtBQUssSUFBSSxFQUFFO0lBQ3ZDLE1BQU0sSUFBSSxHQUFHLE1BQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ3RELEdBQUcsRUFBRTtZQUNILElBQUksRUFBRSxTQUFTO1lBQ2YsT0FBTyxFQUFFLEtBQUs7U0FDZjtLQUNGLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDUixNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsS0FBSyxNQUFNLElBQUksSUFBSSxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUM7SUFDOUUsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLENBQUM7SUFDL0IsSUFBSSxXQUFXLEdBQVcsVUFBVTtRQUNsQyxDQUFDLENBQUMsa0JBQWtCO1FBQ3BCLENBQUMsQ0FBQyxNQUFNLGVBQWUsQ0FBQyxLQUFLLENBQUM7WUFDMUIsT0FBTyxFQUFFLHNDQUFzQztZQUMvQyxZQUFZLEVBQUUsa0JBQWtCO1NBQ2pDLENBQUMsQ0FBQztJQUVQLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQztRQUN4QyxDQUFDLENBQUMsV0FBVztRQUNiLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUU3QyxNQUFNLGtCQUFrQixHQUFHLE1BQU0sR0FBRztTQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQ2pCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7U0FDaEIsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsbUlBQW1JO0lBQzFKLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtRQUN2QixPQUFPLENBQUMsR0FBRyxDQUNULDJCQUEyQixXQUFXLG1CQUFtQixFQUN6RCxRQUFRLENBQUMsS0FBSyxDQUNmLENBQUM7UUFDRixPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixXQUFXLEVBQUUsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakUsSUFBSTtZQUNGLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUNuRDtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osTUFBTSxJQUFJLGdCQUFnQixDQUFDLDZCQUE2QixFQUFFO2dCQUN4RCxPQUFPLEVBQUUsb0NBQW9DO2dCQUM3QyxVQUFVLEVBQUUsZUFBZSxXQUFXLHVFQUF1RTthQUM5RyxDQUFDLENBQUM7U0FDSjtLQUNGO0lBQ0QsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzcCBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB5YXJncyBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBBbXBsaWZ5VXNlckVycm9yIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuaW1wb3J0IHsgQW1wbGlmeVByb21wdGVyLCBMb2dMZXZlbCwgcHJpbnRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcHJvamVjdCByb290IGRpcmVjdG9yeS5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldFByb2plY3RSb290ID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCBhcmd2ID0gYXdhaXQgeWFyZ3MocHJvY2Vzcy5hcmd2LnNsaWNlKDIpKS5vcHRpb25zKHtcbiAgICB5ZXM6IHtcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIH0sXG4gIH0pLmFyZ3Y7XG4gIGNvbnN0IHVzZURlZmF1bHQgPSBwcm9jZXNzLmVudi5ucG1fY29uZmlnX3llcyA9PT0gJ3RydWUnIHx8IGFyZ3YueWVzID09PSB0cnVlO1xuICBjb25zdCBkZWZhdWx0UHJvamVjdFJvb3QgPSAnLic7XG4gIGxldCBwcm9qZWN0Um9vdDogc3RyaW5nID0gdXNlRGVmYXVsdFxuICAgID8gZGVmYXVsdFByb2plY3RSb290XG4gICAgOiBhd2FpdCBBbXBsaWZ5UHJvbXB0ZXIuaW5wdXQoe1xuICAgICAgICBtZXNzYWdlOiAnV2hlcmUgc2hvdWxkIHdlIGNyZWF0ZSB5b3VyIHByb2plY3Q/JyxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0UHJvamVjdFJvb3QsXG4gICAgICB9KTtcblxuICBwcm9qZWN0Um9vdCA9IHBhdGguaXNBYnNvbHV0ZShwcm9qZWN0Um9vdClcbiAgICA/IHByb2plY3RSb290XG4gICAgOiBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgcHJvamVjdFJvb3QpO1xuXG4gIGNvbnN0IGlzRXhpc3RQcm9qZWN0Um9vdCA9IGF3YWl0IGZzcFxuICAgIC5zdGF0KHByb2plY3RSb290KVxuICAgIC50aGVuKCgpID0+IHRydWUpXG4gICAgLmNhdGNoKCgpID0+IGZhbHNlKTsgLy8gVGhlcmUncyBubyBgZnNwLmV4aXN0c2AgbWV0aG9kLCBzbyB3ZSB1c2UgYHN0YXRgIGluc3RlYWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzM5OTYwI2lzc3VlY29tbWVudC05MDk0NDQ2NjdcbiAgaWYgKCFpc0V4aXN0UHJvamVjdFJvb3QpIHtcbiAgICBwcmludGVyLmxvZyhcbiAgICAgIGBUaGUgcHJvdmlkZWQgZGlyZWN0b3J5ICgke3Byb2plY3RSb290fSkgZG9lcyBub3QgZXhpc3QuYCxcbiAgICAgIExvZ0xldmVsLkRFQlVHXG4gICAgKTtcbiAgICBwcmludGVyLmxvZyhgQ3JlYXRpbmcgZGlyZWN0b3J5ICR7cHJvamVjdFJvb3R9YCwgTG9nTGV2ZWwuREVCVUcpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBmc3AubWtkaXIocHJvamVjdFJvb3QsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoJ1Byb2plY3REaXJlY3RvcnlDcmVhdGVFcnJvcicsIHtcbiAgICAgICAgbWVzc2FnZTogYEZhaWxlZCB0byBjcmVhdGUgcHJvamVjdCBkaXJlY3RvcnlgLFxuICAgICAgICByZXNvbHV0aW9uOiBgRW5zdXJlIHRoYXQgJHtwcm9qZWN0Um9vdH0gaXMgdGhlIGNvcnJlY3QgcGF0aCBhbmQgeW91IGhhdmUgd3JpdGUgcGVybWlzc2lvbnMgdG8gdGhpcyBsb2NhdGlvbi5gLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwcm9qZWN0Um9vdDtcbn07XG4iXX0=