/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { existsSync as _existsSync } from 'fs';
import _fs from 'fs/promises';
/**
 * Ensure that the .gitignore file exists with the correct contents in the current working directory
 */
export declare class GitIgnoreInitializer {
    private readonly projectRoot;
    private readonly existsSync;
    private readonly fs;
    private readonly gitIgnorePath;
    /**
     * Injecting console and fs for testing
     */
    constructor(projectRoot: string, existsSync?: typeof _existsSync, fs?: typeof _fs);
    /**
     * If .gitignore exists, append patterns to ignore. Otherwise, create .gitignore with patterns to ignore
     */
    ensureInitialized: () => Promise<void>;
    /**
     * Add ignore patterns to .gitignore contents
     */
    private addIgnorePatterns;
    /**
     * If .gitignore does not exist, this is a noop. Otherwise, get contents as an array
     */
    private getGitIgnoreContent;
    /**
     * Check if a .gitignore file exists in projectRoot
     */
    private gitIgnoreExists;
}
//# sourceMappingURL=gitignore_initializer.d.ts.map