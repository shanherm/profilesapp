import { EOL } from 'os';
import { LogLevel, format, printer } from '@aws-amplify/cli-core';
const LEARN_MORE_USAGE_DATA_TRACKING_LINK = 'https://docs.amplify.aws/react/reference/telemetry';
/**
 * Orchestration class that sets up a new Amplify project
 */
export class AmplifyProjectCreator {
    projectRoot;
    packageManagerController;
    projectRootValidator;
    gitIgnoreInitializer;
    initialProjectFileGenerator;
    defaultDevPackages = [
        '@aws-amplify/backend',
        '@aws-amplify/backend-cli',
        'aws-cdk@^2',
        'aws-cdk-lib@^2',
        'constructs@^10.0.0',
        'typescript@^5.0.0',
        'tsx',
        'esbuild',
    ];
    defaultProdPackages = ['aws-amplify'];
    /**
     * Orchestrator for the create-amplify workflow.
     * Delegates out to other classes that handle parts of the getting started experience
     */
    constructor(projectRoot, packageManagerController, projectRootValidator, gitIgnoreInitializer, initialProjectFileGenerator) {
        this.projectRoot = projectRoot;
        this.packageManagerController = packageManagerController;
        this.projectRootValidator = projectRootValidator;
        this.gitIgnoreInitializer = gitIgnoreInitializer;
        this.initialProjectFileGenerator = initialProjectFileGenerator;
    }
    /**
     * Executes the create-amplify workflow
     */
    create = async () => {
        printer.log(`Validating current state of target directory...`, LogLevel.DEBUG);
        await this.projectRootValidator.validate();
        await this.packageManagerController.initializeProject();
        printer.printNewLine();
        printer.log(format.sectionHeader(`Installing devDependencies:`));
        printer.log(format.list(this.defaultDevPackages));
        printer.printNewLine();
        printer.log(format.sectionHeader(`Installing dependencies:`));
        printer.log(format.list(this.defaultProdPackages));
        printer.printNewLine();
        await printer.indicateProgress('Installing devDependencies', () => this.packageManagerController.installDependencies(this.defaultDevPackages, 'dev'));
        printer.log(`✔ DevDependencies installed`);
        await printer.indicateProgress('Installing dependencies', () => this.packageManagerController.installDependencies(this.defaultProdPackages, 'prod'));
        printer.log(`✔ Dependencies installed`);
        await printer.indicateProgress('Creating template files', async () => {
            await this.gitIgnoreInitializer.ensureInitialized();
            await this.initialProjectFileGenerator.generateInitialProjectFiles();
        });
        printer.log(`✔ Template files created`);
        printer.log(format.success('Successfully created a new project!'));
        printer.printNewLine();
        const cdPreamble = process.cwd() === this.projectRoot
            ? null
            : `Navigate to your project directory using ${format.command(`cd .${this.projectRoot.replace(process.cwd(), '')}`)} and then:`;
        printer.log(format.sectionHeader(`Welcome to AWS Amplify!`));
        const welcomeMessage = format.list([
            `Get started by running ${format.normalizeAmpxCommand('sandbox')}.`,
            `Run ${format.normalizeAmpxCommand('help')} for a list of available commands.`,
        ]);
        const instructionSteps = [cdPreamble, welcomeMessage]
            .filter(Boolean)
            .join(EOL);
        printer.log(instructionSteps);
        printer.printNewLine();
        printer.log(format.note(`Amplify collects anonymous telemetry data about general usage of the CLI. Participation is optional, and you may opt-out by using ${format.normalizeAmpxCommand('configure telemetry disable')}. To learn more about telemetry, visit ${format.link(LEARN_MORE_USAGE_DATA_TRACKING_LINK)}`));
        printer.printNewLine();
    };
}
//# sourceMappingURL=data:application/json;base64,